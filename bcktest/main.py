from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv
import os
import logging
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("main")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

client_id = os.getenv("SPOTIFY_CLIENT_ID")
client_secret = os.getenv("SPOTIFY_CLIENT_SECRET")

if not client_id or not client_secret:
    logger.error("SPOTIFY_CLIENT_ID –∏–ª–∏ SPOTIFY_CLIENT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
    raise ValueError("Missing Spotify credentials")

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –º–æ–¥–µ–ª—å —Ñ–æ—Ä–º—ã
class MoodForm(BaseModel):
    intention: str

# –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –ø–æ–∏—Å–∫–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å–ª–æ–º–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
MOOD_TO_QUERY = {
    "energy": "energetic workout",
    "reflection": "ambient reflective",
    "relax": "relaxing instrumental",
    "focus": "deep focus",
    "party": "party hits"
}

def get_spotify_token():
    logger.info("\n\nüé´ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Spotify...")
    try:
        auth_response = requests.post(
            'https://accounts.spotify.com/api/token',
            data={'grant_type': 'client_credentials'},
            auth=(client_id, client_secret)
        )
        auth_response.raise_for_status()
        token = auth_response.json().get("access_token")
        if not token:
            logger.error("\u274c –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
            raise HTTPException(status_code=500, detail="Token missing")
        logger.info("\u2705 –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        return token
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail="Token error")

@app.post("/api/generate_playlist")
async def generate_playlist(data: MoodForm):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: intention='{data.intention}'")
    query = MOOD_TO_QUERY.get(data.intention, "chill")
    logger.info(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")

    token = get_spotify_token()
    headers = {"Authorization": f"Bearer {token}"}

    try:
        search_resp = requests.get(
            "https://api.spotify.com/v1/search",
            headers=headers,
            params={"q": query, "type": "playlist", "limit": 1}
        )
        search_resp.raise_for_status()
        playlists_data = search_resp.json()

        playlists = playlists_data.get("playlists")
        if not playlists:
            logger.warning("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ playlists –≤ –æ—Ç–≤–µ—Ç–µ Spotify")
            return {"error": "No playlists object in response"}

        items = playlists.get("items")
        if not items or not isinstance(items, list) or not items[0]:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")
            return {"error": "No valid playlist found"}

        playlist_id = items[0].get("id")
        playlist_url = items[0].get("external_urls", {}).get("spotify")
        if not playlist_id:
            logger.warning("ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return {"error": "Playlist ID not found"}

        logger.info(f"üé∂ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: {playlist_id}")

        tracks_resp = requests.get(
            f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks",
            headers=headers,
            params={"limit": 10}
        )
        tracks_resp.raise_for_status()
        tracks_data = tracks_resp.json()

        tracks = []
        for item in tracks_data.get("items", []):
            track = item.get("track")
            if not track:
                continue
            tracks.append({
                "name": track["name"],
                "artist": track["artists"][0]["name"] if track["artists"] else "Unknown",
                "url": track["external_urls"]["spotify"],
                "preview_url": track.get("preview_url")
            })

        logger.info(f"\u2705 –ü–æ–ª—É—á–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤")
        return {
            "playlist_url": playlist_url,
            "tracks": tracks
        }
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=str(e))
