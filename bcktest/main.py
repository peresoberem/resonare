from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv
import os
import logging
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("main")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

client_id = os.getenv("SPOTIFY_CLIENT_ID")
client_secret = os.getenv("SPOTIFY_CLIENT_SECRET")

if not client_id or not client_secret:
    logger.error("SPOTIFY_CLIENT_ID –∏–ª–∏ SPOTIFY_CLIENT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
    raise ValueError("Missing Spotify credentials")

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –º–æ–¥–µ–ª—å —Ñ–æ—Ä–º—ã
class MoodForm(BaseModel):
    intention: str

# –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
MOOD_TO_CATEGORY = {
    "energy": "workout",
    "reflection": "mood",
    "relax": "chill",
    "focus": "focus",
    "party": "party"
}

def get_spotify_token():
    logger.info("\n\nüé´ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Spotify...")
    try:
        auth_response = requests.post(
            'https://accounts.spotify.com/api/token',
            data={'grant_type': 'client_credentials'},
            auth=(client_id, client_secret)
        )
        auth_response.raise_for_status()
        token = auth_response.json().get("access_token")
        if not token:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
            raise HTTPException(status_code=500, detail="Token missing")
        logger.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        return token
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail="Token error")

@app.post("/api/generate_playlist")
async def generate_playlist(data: MoodForm):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: intention='{data.intention}'")
    category_id = MOOD_TO_CATEGORY.get(data.intention, "mood")
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_id}")

    token = get_spotify_token()
    headers = {"Authorization": f"Bearer {token}"}

    try:
        # –®–∞–≥ 1: –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        playlist_resp = requests.get(
            f"https://api.spotify.com/v1/browse/categories/{category_id}/playlists",
            headers=headers,
            params={"limit": 1}
        )
        playlist_resp.raise_for_status()
        playlists_data = playlist_resp.json()

        playlist_items = playlists_data.get("playlists", {}).get("items", [])
        if not playlist_items:
            logger.warning("–ù–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return {"error": "No playlists found"}

        playlist_id = playlist_items[0]["id"]
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ–π–ª–∏—Å—Ç: {playlist_id}")

        # –®–∞–≥ 2: –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        tracks_resp = requests.get(
            f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks",
            headers=headers,
            params={"limit": 10}
        )
        tracks_resp.raise_for_status()
        tracks_data = tracks_resp.json()

        tracks = []
        for item in tracks_data.get("items", []):
            track = item.get("track")
            if not track:
                continue
            tracks.append({
                "name": track["name"],
                "artist": track["artists"][0]["name"] if track["artists"] else "Unknown",
                "url": track["external_urls"]["spotify"],
                "preview_url": track.get("preview_url")
            })

        return {"tracks": tracks}
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))
